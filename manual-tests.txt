Use `./build.sh` to build CiCo and `./run.sh` to run it if using the command line. You can otherwise use your IDE to build and run CiCo.

# Module 2: Sample test for the happy path. 

## Test steps
1. Build and run CiCo.
2. Enter 00000000 into the field and click Update.
3. Wait 11 seconds.

## Expected results:
* The status panel should appear after step 2.
* The main panel should appear after step 3.

# Module 2: Sample test for invalid card numbers.

## Test steps
1. Build and run CiCo.
2. Enter 99999999 into the field and click Update.
3. Wait 11 seconds.

## Expected results:
* The error panel should appear after step 2.
* The main panel should appear after step 3.

# Module 2: Help users recognize, diagnose, and recover from errors

## Test steps
1. Build and run CiCo.
2. Enter 99999999 into the field and click Update.

## Expected results
* The panel should display "Please show your card to staff to validate." after step 2.

# Module 2: Help and documentation

## Test steps
1. Build and run CiCo.

## Expected results
* The version number should be displayed after "CiCo" at the bottom.


# Module 3: Visibility of system status 

## Test steps
1. Build and run CiCo.
2. Enter 00000000 into the field and click Update.
3. Wait for status panel to close.
4. Enter 00000000 into the field and click Update.

## Expected results
* Should display "Checked IN" after step 2.
* Should display "Checked OUT" after step 4.

# Module 3: Match between system and the real world

## Test steps
1. Build and run CiCo.
2. Enter 00000000 into the field and click Update.

## Expected results
* Should display "Developer" for the user name.

# Module 4: Validate numerical characters only

## Test steps
1. Build and run CiCo
2. Enter abcd into the field.

## Expected results
* Field should ignore non-numerical input

# Module 5: Clean shutdown program when window is closed

## Test steps
1. Build and run CiCo
2. Close window

## Expected results
* Program should shut down in bash after JFrame is closed without having to use ctrl+c in bash

# Module 6: Aesthetic and minimalist design

## Test steps
1. Build and run CiCo.
2. Observe the color scheme of the main panel.
3. Enter 00000000 into the field and click Update.
4. Observe the color scheme of the status panel.
5. Wait for 10 seconds for the panel to automatically return to main.
6. Enter 99999999 into the field and click Update.
7. Observe the color scheme of the error panel.

## Expected results
* The application should use a professional, consistent monochromatic color scheme with neutral colors.
* Text should be clearly readable against all backgrounds.
* The error panel should be visually distinct without using overly harsh colors.
* All buttons and interactive elements should maintain proper contrast for usability and consistency purposes.